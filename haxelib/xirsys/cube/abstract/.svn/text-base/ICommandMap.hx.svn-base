/**
 * Copyright (c) 2011, Influxis.
 * 
 * support@influxis.com
 * 
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   - Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY INFLUXIS "AS IS" AND ANY EXPRESS OR IMPLIED 
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
 * EVENT SHALL INFLUXIS OR THEIR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 * 
 * @author Lee Sylvester
 **/

package thx.cube.abstract;

import thx.cube.mvcs.Actor;
import thx.cube.mvcs.Command;
import thx.cube.events.CentralDispatcher;
import thx.injector.Injector;

interface ICommandMap<E> {
	public var eventDispatcher : CentralDispatcher<E>;
	public var injector : Injector;
	private var eventTypeMap : Hash<Hash<E->Void>>;
	private var verifiedCommandClasses : Hash<Bool>;
	public function mapEvent( eventType : String, commandClass : Class<Command>, eventClass : Class<E>, ?oneshot : Bool = false ) : Void;
	public function unmapEvent( eventType : String, commandClass : Class<Command> ) : Void;
	public function unmapEvents() : Void;
	public function hasEventCommand( eventType : String, commandClass : Class<Command> ) : Bool;
	public function execute( commandClass : Class<Command>, ?payload : Dynamic = null, ?payloadClass : Class<Dynamic> = null ) : Void;
}
