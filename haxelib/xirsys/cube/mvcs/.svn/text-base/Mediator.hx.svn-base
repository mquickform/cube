/**
 * Copyright (c) 2011, Influxis.
 * 
 * support@influxis.com
 * 
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   - Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY INFLUXIS "AS IS" AND ANY EXPRESS OR IMPLIED 
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
 * EVENT SHALL INFLUXIS OR THEIR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 * 
 * @author Lee Sylvester
 **/

package thx.cube.mvcs;

import thx.cube.abstract.IView;
import thx.cube.abstract.IEventMap;
import thx.cube.abstract.IMediator;
import thx.cube.abstract.IMediatorMap;
import thx.cube.abstract.ICentralDispatcher;
import thx.injector.Injector;

import thx.cube.core.EventMap;

class Mediator implements IMediator, implements haxe.rtti.Infos {
	
	@Inject
	public var mediatorMap : IMediatorMap<Dynamic>;
	
	@Inject
	public var eventDispatcher : ICentralDispatcher<Dynamic>;
	
	@Inject
	public var injector : Injector;
	
	public var eventMap : IEventMap<Dynamic>;
	public var viewComponent : Dynamic;
	public var removed : Bool;
	
	public function new()
	{
		eventMap = new EventMap( eventDispatcher );
	}
	
	public function preRemove()
	{
		if ( eventMap != null )
			eventMap.unmapListeners();
		removed = true;
		onRemove();
	}
	
	//---------------------------------------------------------------------
	//  API
	//---------------------------------------------------------------------
	
	public function preRegister()
	{
		removed = false;
		onRegister();
	}
	
	public function onRegister()
	{
	}
	
	public function onRemove()
	{
	}
	
	public function getViewComponent()
	{
		return viewComponent;
	}
	
	public function setViewComponent( view : Dynamic )
	{
		viewComponent = view;
	}
}
