/**
 * Copyright (c) 2011, Influxis.
 * 
 * support@influxis.com
 * 
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   - Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY INFLUXIS "AS IS" AND ANY EXPRESS OR IMPLIED 
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
 * EVENT SHALL INFLUXIS OR THEIR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 * 
 * @author Lee Sylvester
 **/

package thx.cube.core;

import thx.cube.events.CentralDispatcher;
import thx.injector.Injector;

import thx.cube.mvcs.Actor;
import thx.cube.mvcs.Command;
import thx.cube.abstract.ICommandMap;

class CommandMap<E> implements ICommandMap<E> {
	
	public var eventDispatcher : CentralDispatcher<E>;
	public var injector : Injector;
	
	private var eventTypeMap : Hash<Hash<E->Void>>;
	private var verifiedCommandClasses : Hash<Bool>;
	
	public function new( eventDispatcher : CentralDispatcher<E>, injector : Injector )
	{
		this.eventDispatcher = eventDispatcher;
		this.injector = injector;
		verifiedCommandClasses = new Hash();
		eventTypeMap = new Hash();
	}
	
	//---------------------------------------------------------------------
	//  API
	//---------------------------------------------------------------------
	
	public function mapEvent( eventType : String, commandClass : Class<Command>, eventClass : Class<E>, ?oneshot : Bool = false )
	{
		var me = this;
		var cb : E -> Void = function( ?event : E )
		{
			me.routeEventToCommand( eventType, commandClass, eventClass, event );
		};
		if ( oneshot )
			eventDispatcher.addEventHandlerOnce( eventType, cb );
		else
			eventDispatcher.addEventHandler( eventType, cb );
		if ( eventTypeMap.get( eventType ) == null )
			eventTypeMap.set( eventType, new Hash<E->Void>() );
		eventTypeMap.get( eventType ).set( Type.getClassName( commandClass ), cb );
	}
	
	public function unmapEvent( eventType : String, commandClass : Class<Command> )
	{
		if ( eventTypeMap.get( eventType ) != null )
		{
			var cb : E -> Void = eventTypeMap.get( eventType ).get( Type.getClassName( commandClass ) );
			eventTypeMap.get( eventType ).remove( Type.getClassName( commandClass ) );
			eventDispatcher.remove( eventType, cb );
		}
	}
	
	public function unmapEvents()
	{
		
	}
	
	public function hasEventCommand( eventType : String, commandClass : Class<Command> ) : Bool
	{
		return ( eventTypeMap.get( eventType ) != null && eventTypeMap.get( eventType ).get( Type.getClassName( commandClass ) ) != null );
	}
	
	public function execute( commandClass : Class<Command>, ?payload : Dynamic = null, ?payloadClass : Class<Dynamic> = null )
	{
		if ( payload != null || payloadClass != null )
		{
			if ( payloadClass == null )
				payloadClass = Type.getClass( payload );
			injector.mapInstance( payloadClass, payload );
		}
		
		var command = injector.instantiate( commandClass );
		
		if ( payload != null || payloadClass != null )
			injector.unmap( payloadClass );
		
		command.execute();
	}
	
	//---------------------------------------------------------------------
	//  Internal
	//---------------------------------------------------------------------
	
	private function routeEventToCommand( eventType : String, commandClass : Class<Command>, originalEventClass : Class<E>, ?event : E = null ) : Bool
	{
		if ( event != null && !Std.is( event, originalEventClass ) && !Std.is( event, Type.getSuperClass( originalEventClass ) ) ) return false;
		execute( commandClass, event );
		
		return true;
	}
}